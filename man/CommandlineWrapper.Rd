% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/create_r_functions_wrapping_commandline_tools.R
\name{CommandlineWrapper}
\alias{CommandlineWrapper}
\title{R6 Class representing a commandline tool}
\description{
This class is designed for automating creation of R functions wrapping commandline tools
}
\examples{
\dontrun{
# Step 1: Load library

library(utilitybeltcli)


# Step 2: Define basic components of the tool (and the R function we want to produce that wraps it)

MosdepthWrapper <- CommandlineWrapper$new(
  base_command = "mosdepth",
  tool_title = "Mosdepth",
  tool_description = "simple R wrapper",
  function_name = "run_mosdepth"
)


# Step 3: describe the paramaters of the tool including:
#   (a) flags (–-verbose)
#   (b) arguments (-–threads <num_threads>)
#   (c) positional arguments (base_command <positional_arg>)

MosdepthWrapper$add_arg(name = "threads", prefix = "--threads")
MosdepthWrapper$add_flag(name = "d4", prefix = "--d4", default = FALSE)
MosdepthWrapper$add_pos(name = "prefix", required = TRUE)
MosdepthWrapper$add_pos(name = "bam_or_cram", required = TRUE)


# Step 4: produce the R function wrapper for the tool
MosdepthWrapper$create_function_wrapping_commandline_tool()
}

}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{base_command}}{name of base command (e.g. grep) (string)}

\item{\code{cli_arg_list}}{a list of the \strong{flags} (--verbose), \strong{arguments} (--threads <num_threads>), and \strong{positional arguments} (base_command <positional_arg>) of the commandline tool (list)}

\item{\code{function_name}}{name of the R function that will wrap the commandline tool (string)}

\item{\code{tool_title}}{name of the tool we are wrapping. Used only for roxygen documentation - doesn't need to match the tool specs one to one (string)}

\item{\code{tool_description}}{what does the commandline tool we're wrapping actually do (string)
Initialise CommandLineWrapperClass}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-CommandlineWrapper-new}{\code{CommandlineWrapper$new()}}
\item \href{#method-CommandlineWrapper-add_arg}{\code{CommandlineWrapper$add_arg()}}
\item \href{#method-CommandlineWrapper-add_pos}{\code{CommandlineWrapper$add_pos()}}
\item \href{#method-CommandlineWrapper-add_flag}{\code{CommandlineWrapper$add_flag()}}
\item \href{#method-CommandlineWrapper-create_function_wrapping_commandline_tool}{\code{CommandlineWrapper$create_function_wrapping_commandline_tool()}}
\item \href{#method-CommandlineWrapper-clone}{\code{CommandlineWrapper$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CommandlineWrapper-new"></a>}}
\if{latex}{\out{\hypertarget{method-CommandlineWrapper-new}{}}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CommandlineWrapper$new(
  base_command,
  tool_title,
  tool_description,
  function_name
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{base_command}}{name of base command (e.g. grep) (string)}

\item{\code{tool_title}}{name of the tool we are wrapping. Used only for roxygen documentation - doesn't need to match the tool specs one to one (string)}

\item{\code{tool_description}}{what does the cli tool we're wrapping actually do (string)}

\item{\code{function_name}}{name of the R function that will wrap the commandline tool (string)}

\item{\code{cli_arg_list}}{cli_arg_list object}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
run for its side effects (writes a simple CLI tool wrapping R function to the clipboard)
Add Argument

Adds an argument to cli_arg_list. Here, an arg is defined as something like  \strong{--threads <num_threads>}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CommandlineWrapper-add_arg"></a>}}
\if{latex}{\out{\hypertarget{method-CommandlineWrapper-add_arg}{}}}
\subsection{Method \code{add_arg()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CommandlineWrapper$add_arg(
  name,
  prefix,
  default = "NULL",
  help_message = "<no help message available>"
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{name}}{name of argument/option. Does NOT need to match the commandline tools native option names (string)}

\item{\code{prefix}}{prefix of the argument/option. e.g. --threads. This needs to match one of the commandline tools prefixes (string)}

\item{\code{default}}{what is the default value. Specifying a non-null default here implies that the argument should always be included in the commandline. To let the user specify the argument value when running the wrapping R function, leave as null (string)}

\item{\code{help_message}}{description of what this argument/option does (string)}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
run for its side effects (updates objects cli_arg_list)
Add Positional Argument

Adds a position argument to cli_arg_list. Here, a positional argument is defined as something like  \strong{base_command <positional_argument_1>}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CommandlineWrapper-add_pos"></a>}}
\if{latex}{\out{\hypertarget{method-CommandlineWrapper-add_pos}{}}}
\subsection{Method \code{add_pos()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CommandlineWrapper$add_pos(
  name,
  required,
  help_message = "<no help message available>"
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{name}}{name of argument/option. Does NOT need to match the commandline tools native option names (string)}

\item{\code{required}}{is this positional argument required (bool)}

\item{\code{help_message}}{description of what this argument/option does (string)}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
run for its side effects (updates objects cli_arg_list)
Add flag

Adds a flag to the cli_arg_list.
Here, a flag is defined as something like  \strong{base_command --verbose}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CommandlineWrapper-add_flag"></a>}}
\if{latex}{\out{\hypertarget{method-CommandlineWrapper-add_flag}{}}}
\subsection{Method \code{add_flag()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CommandlineWrapper$add_flag(
  name,
  prefix,
  default = FALSE,
  help_message = "<no help message available>"
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{name}}{name of argument/option. Does NOT need to match the commandline tools native option names (string)}

\item{\code{prefix}}{prefix of the argument/option. e.g. --verbose. This needs to match one of the commandline tools prefixes (string)}

\item{\code{default}}{what is the default value - should the flag be present/absent by default (boolean)}

\item{\code{help_message}}{description of what this argument/option does (string)}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
run for its side effects (updates objects cli_arg_list)
Create R Function Wrapping Commandline Tool

Creates an r function wrapping a commandline tool and saves it to clipboard
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CommandlineWrapper-create_function_wrapping_commandline_tool"></a>}}
\if{latex}{\out{\hypertarget{method-CommandlineWrapper-create_function_wrapping_commandline_tool}{}}}
\subsection{Method \code{create_function_wrapping_commandline_tool()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CommandlineWrapper$create_function_wrapping_commandline_tool()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Run for its side-effects (copies R function definition to clipboard)
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CommandlineWrapper-clone"></a>}}
\if{latex}{\out{\hypertarget{method-CommandlineWrapper-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CommandlineWrapper$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
